
import java.io.File;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public final class Demo {

    private static void bfs(Map<Integer, List<Integer>> graph, int V, int src) {

        boolean visited[] = new boolean[V];
        Deque<Integer> queue = new ArrayDeque<>();

        visited[src] = true;
        queue.add(src);

        while (!queue.isEmpty()) {

            int head = queue.remove();
            System.out.println(head + " ");

            // iterate each child in current node
            for (int child : graph.get(head)) {

                if (visited[child] == false) {

                    queue.add(child);
                    visited[child] = true;

                }

            }

        }

    }

    static Map<Integer, List<Integer>> buildAdjList(int V, int[][] edges) {

        Map<Integer, List<Integer>> adjList = new HashMap<>();

        // initialize adj list
        for (int i = 0; i < V; i++) {
            adjList.put(i, new ArrayList<>());
        }

        // iterate through edges and build list
        for (int[] edge : edges) {

            int src = edge[0];
            int dest = edge[1];
            adjList.get(src).add(dest);
            adjList.get(dest).add(src);

        }

        return adjList;

    }

    /**
     * Input
     * 4 4
     * 0 1
     * 0 2
     * 1 2
     * 2 3
     * 
     * output
     * Vertex 0-->1 2
     * Vertex 1-->0 2
     * Vertex 2-->0 1 3
     * Vertex 3-->2
     * 
     * 
     * 
     */

    public static void main(String[] args) throws Exception {

        Scanner scanner = null;
        try {

            scanner = new Scanner(new File("input.txt"));

            // scanner = new Scanner(System.in);
            // int t = scanner.nextInt();
            // while (t > 0) {

            int n = scanner.nextInt();
            int m = scanner.nextInt();
            // int s = scanner.nextInt();

            int arr[][] = new int[n][];

            for (int i = 0; i < m; i++) {
                int u = scanner.nextInt();
                int v = scanner.nextInt();
                int[] edge = new int[2];
                edge[0] = u;
                edge[1] = v;
                arr[i] = edge;
            }
            Map<Integer, List<Integer>> graph = buildAdjList(n, arr);
            bfs(graph, n, 0);
            // System.out.println(res);
            // t--;

            // }

        } finally {
            scanner.close();
        }
    }
}
